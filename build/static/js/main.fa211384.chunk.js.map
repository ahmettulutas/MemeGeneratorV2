{"version":3,"sources":["features/loadMemes/loadMemesSlice.js","features/editMeme/memeFormSlice.js","store.js","components/header.jsx","components/memeForm.jsx","features/editMeme/memeComponent.js","components/selectbutton.jsx","components/meme.jsx","components/failed.jsx","features/loadMemes/displayMemes.js","components/fetchedMeme.jsx","components/footer.jsx","App.js","index.js"],"names":["loadAllMemes","createAsyncThunk","a","fetch","response","json","data","console","log","loadMemesSlice","createSlice","name","initialState","isLoading","hasError","fulfilled","pending","allMemes","extraReducers","state","action","payload","rejected","REHYDRATE","selectAllMemes","memes","selectIsPending","selectFulfilled","selectRejected","postMemeRequest","arg","fetchedMemeSlice","isFailed","isFulfilled","fetchedmeme","rehydrate","selectMeme","selectIsLoading","selectIsFulfilled","persistConfig","key","storage","whitelist","blacklist","rootReducer","combineReducers","persistedReducer","persistReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","PAUSE","PURGE","REGISTER","PERSIST","persistor","persistStore","Header","className","to","MemeForm","id","navigate","useNavigate","dispatch","useDispatch","useState","template_id","username","process","password","queryParams","setQueryParams","handleChange","e","target","value","prev","toUpperCase","handleSubmit","preventDefault","makeParamsQuery","persist","onSubmit","spellCheck","required","type","placeholder","onChange","obj","Object","entries","map","values","join","MemeComponent","selectedMeme","setSelectedMeme","useSelector","useParams","useEffect","find","item","alt","src","url","textAmount","box_count","SelectButton","focusable","role","xmlns","viewBox","fill","d","Meme","Failed","DisplayMemes","loading","length","filter","createMemeComponent","meme","style","textDecoration","FetchedMeme","newMeme","background","speed","width","height","loop","autoplay","rel","href","download","Footer","App","path","exact","element","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.fa211384.chunk.js","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport { REHYDRATE} from \"redux-persist\";\r\n// async action to fetch all meme templates\r\nexport const loadAllMemes = createAsyncThunk(\r\n  \"allMemes/loadAllMemes\",\r\n  async () => {\r\n    try {\r\n      const response = await fetch(\"https://api.imgflip.com/get_memes\");\r\n      const json = await response.json();\r\n      return json.data;\r\n    }\r\n    catch(error) {\r\n      console.log(error)\r\n    }\r\n  } );\r\n\r\nexport const loadMemesSlice = createSlice({\r\n  name: \"allMemes\",\r\n  initialState: {\r\n    isLoading: true,\r\n    hasError: false,\r\n    fulfilled: false,\r\n    pending:false,\r\n    allMemes: {}\r\n  },\r\n  extraReducers:  {\r\n    [loadAllMemes.pending]: (state, action) => {\r\n      state.pending = true;\r\n    },\r\n    [loadAllMemes.fulfilled]: (state, action) => {\r\n      state.fulfilled = true;\r\n      state.isLoading = false;\r\n      state.allMemes = action.payload;\r\n    },\r\n    [loadAllMemes.rejected]: (state, action) => {\r\n      state.hasError = true;\r\n    },\r\n    [REHYDRATE]: (state,action) => {\r\n\r\n      console.log(\"REHYDRATE\");\r\n  }\r\n}\r\n});\r\nexport default loadMemesSlice.reducer;\r\n\r\n// selectors\r\nexport const selectAllMemes = (state) => state.loadMemesSlice.allMemes.memes;\r\nexport const selectIsPending = (state) => state.loadMemesSlice.isLoading;\r\nexport const selectFulfilled = (state) => state.loadMemesSlice.fulfilled;\r\nexport const selectRejected = (state)  => state.loadMemesSlice.hasError;","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport { REHYDRATE } from \"redux-persist/lib/constants\";\r\n\r\nexport const postMemeRequest = createAsyncThunk(\"formSlice/postForm\", async (arg) => {\r\n  //arg is the arguement passed from the dispatch\r\n  try {\r\n    const response = await fetch(`https://api.imgflip.com/caption_image${arg}`)\r\n    const json = await response.json()  \r\n    return json;\r\n  }\r\n  catch(error) {\r\n    console.log(error)\r\n  }\r\n\r\n});\r\n\r\nconst fetchedMemeSlice = createSlice({\r\n  name: \"formSlice\",\r\n  initialState: {\r\n    isLoading:false,\r\n    isFailed:false,\r\n    isFulfilled:false,\r\n    fetchedmeme:{},\r\n    rehydrate:false\r\n  },\r\n  extraReducers:{\r\n    [postMemeRequest.pending]:(state) => {\r\n      state.isLoading = true;\r\n    },\r\n    [postMemeRequest.fulfilled]:(state,action) => {\r\n      state.fetchedmeme = action.payload;\r\n      state.isFulfilled = true;\r\n      state.isLoading = false;\r\n    },\r\n    [postMemeRequest.rejected]:(state) => {\r\n      state.isFailed = true;\r\n    },\r\n    [REHYDRATE]: (state,action) => {\r\n        console.log(\"rehydrated\");\r\n    }\r\n  }\r\n\r\n\r\n});\r\nexport default fetchedMemeSlice.reducer;\r\n\r\n//selectors\r\nexport const selectMeme = state => state.fetchedMemeSlice.fetchedmeme;\r\nexport const selectIsLoading = state => state.fetchedMemeSlice.isLoading;\r\nexport const selectRehydrate = state => state.fetchedMemeSlice.rehydrate;\r\nexport const selectIsFulfilled = state => state.fetchedMemeSlice.isFulfilled;\r\n\r\n","\r\n  import { configureStore } from '@reduxjs/toolkit'\r\n  import loadMemesSlice from \"./features/loadMemes/loadMemesSlice\";\r\n  import fetchedMemeSlice from \"./features/editMeme/memeFormSlice\";\r\n  import { combineReducers } from '@reduxjs/toolkit';\r\n  import {\r\n    persistStore,\r\n    persistReducer,\r\n    FLUSH,\r\n    REHYDRATE,\r\n    PAUSE,\r\n    PERSIST,\r\n    PURGE,\r\n    REGISTER,\r\n  } from 'redux-persist'\r\n  import storage from 'redux-persist/lib/storage'\r\nconst persistConfig = { // configuration object for redux-persist\r\n    key: 'root',\r\n    storage, // define which storage to use\r\n    whitelist: [\"loadMemesSlice\"],\r\n    blacklist:[\"router\"]\r\n  }  \r\nconst rootReducer = combineReducers({\r\n  loadMemesSlice: loadMemesSlice,\r\n  fetchedMemeSlice: fetchedMemeSlice,\r\n})\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer) \r\n\r\nconst store = configureStore({\r\n  reducer: persistedReducer, \r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware({\r\n      serializableCheck: {\r\n        ignoredActions: [FLUSH, PAUSE, PURGE, REHYDRATE, REGISTER, PERSIST],\r\n      },\r\n    }), \r\n})\r\n  export const  persistor = persistStore(store);\r\n  export default store;","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nconst Header = () => {\r\n    return (\r\n        <header className=\"header-main\">\r\n            <p>MemeGeneratorV2</p>\r\n            <Link className=\"link\" to=\"/\">ALL MEMES</Link>\r\n            \r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import {useState} from \"react\";\r\nimport { postMemeRequest } from \"../features/editMeme/memeFormSlice\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { persistor } from \"../store\";\r\nconst MemeForm = ({id}) => {\r\n    const navigate = useNavigate()\r\n    const dispatch = useDispatch()\r\n    const [queryParams, setQueryParams] = useState({template_id: id,\r\n                                        username:process.env.REACT_APP_IMGFLIP_USERNAME,\r\n                                        password:process.env.REACT_APP_IMGFLIP_PASSWORD,})\r\n\r\n    const handleChange= (e) => {\r\n        const {name, value} = e.target\r\n        setQueryParams(prev => ({...prev, [name]:value.toUpperCase()}))\r\n        \r\n    }\r\n    const handleSubmit = async (e) => {\r\n        await e.preventDefault()\r\n        await dispatch(postMemeRequest(makeParamsQuery(queryParams)))\r\n        await navigate(`/${id}/fetch`)\r\n        await persistor.persist()\r\n    }\r\n    return (\r\n            <form className=\"form-main\" onSubmit={handleSubmit}>\r\n                <textarea spellCheck=\"false\" required name=\"text0\" type=\"text\" placeholder=\"type something...\" onChange={handleChange}>\r\n                </textarea>\r\n                <textarea spellCheck=\"false\" name=\"text1\" type=\"text\" placeholder=\"type something...\" onChange={handleChange}>\r\n                </textarea>\r\n                <button type=\"submit\">MakeMeme</button>\r\n            </form>\r\n        )}\r\n\r\nexport default MemeForm;\r\n\r\n//helper function to query params\r\nconst makeParamsQuery = (obj) => {\r\n    const convertedObj =  Object.entries(obj).map(([key,values])=> \r\n        `${key}=${values}`\r\n    )\r\n    return '?' + convertedObj.join('&')\r\n  }    ","import { useParams } from \"react-router-dom\";\r\nimport MemeForm from \"../../components/memeForm.jsx\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectAllMemes } from \"../loadMemes/loadMemesSlice\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst MemeComponent = () => {\r\n  const [selectedMeme, setSelectedMeme] = useState(null);\r\n  const allMemes = useSelector(selectAllMemes);\r\n  const { id } = useParams();\r\n  useEffect(() => {\r\n    //checks if allmemes are loaded \r\n      if (allMemes) {\r\n        setSelectedMeme(allMemes.find(item => item.id === id));\r\n      }\r\n  },[id, allMemes]);\r\n  return (\r\n    <main className=\"meme-component-main\">\r\n      {selectedMeme && (\r\n        <div className=\"meme-div\">\r\n          <img alt={selectedMeme.name} src={selectedMeme.url}></img>\r\n          <MemeForm id={id} textAmount={selectedMeme.box_count}/>\r\n        </div>\r\n      )}\r\n    </main>\r\n  );\r\n};\r\nexport default MemeComponent;\r\n\r\n\r\n","const SelectButton = () => {\r\n  return (\r\n    <div className=\"svg-div\">\r\n      <svg\r\n        id=\"svg\"\r\n        aria-hidden=\"true\"\r\n        focusable=\"false\"\r\n        data-prefix=\"fas\"\r\n        data-icon=\"pen-to-square\"\r\n        className=\"svg-inline--fa fa-pen-to-square\"\r\n        role=\"img\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        viewBox=\"0 0 512 512\"\r\n      >\r\n        <path\r\n          fill=\"orange\"\r\n          d=\"M383.1 448H63.1V128h156.1l64-64H63.1C28.65 64 0 92.65 0 128v320c0 35.35 28.65 64 63.1 64h319.1c35.34 0 63.1-28.65 63.1-64l-.0039-220.1l-63.1 63.99V448zM497.9 42.19l-28.13-28.14c-18.75-18.75-49.14-18.75-67.88 0l-38.62 38.63l96.01 96.01l38.62-38.63C516.7 91.33 516.7 60.94 497.9 42.19zM147.3 274.4l-19.04 95.22c-1.678 8.396 5.725 15.8 14.12 14.12l95.23-19.04c4.646-.9297 8.912-3.213 12.26-6.562l186.8-186.8l-96.01-96.01L153.8 262.2C150.5 265.5 148.2 269.8 147.3 274.4z\"\r\n        ></path>\r\n      </svg>\r\n    </div>\r\n  );\r\n};\r\nexport default SelectButton;\r\n","import SelectButton from \"./selectbutton.jsx\";\r\n\r\nconst Meme = ({ id, url, alt, name }) => {\r\n  return (\r\n    <main className=\"each-meme\">\r\n      <div className=\"meme-info\">\r\n        <p>{name}</p>\r\n        <img key={id} alt={name} src={url}></img>\r\n      </div>\r\n      <SelectButton />\r\n    </main>\r\n  );\r\n};\r\nexport default Meme;\r\n","import React from 'react';\r\n\r\nconst Failed = () => {\r\n    return <h1>Upps.. Something went wrong...</h1>\r\n}\r\nexport default Failed;","import {  useEffect } from \"react\";\r\nimport Meme from \"../../components/meme\";\r\nimport Failed from \"../../components/failed\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  selectFulfilled,\r\n  selectAllMemes,\r\n  loadAllMemes,\r\n  selectIsPending,\r\n  selectRejected\r\n} from \"./loadMemesSlice\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst DisplayMemes = () => {\r\n    const dispatch = useDispatch();\r\n    const allMemes = useSelector(selectAllMemes);\r\n    const loading = useSelector(selectIsPending);\r\n    const fulfilled = useSelector(selectFulfilled);\r\n    const rejected = useSelector(selectRejected)\r\n\r\n    useEffect(() => {\r\n      // I'm getting good at this shit <3.\r\n      if(allMemes.length <1) {\r\n        dispatch(loadAllMemes())\r\n      }\r\n    }, [dispatch]);\r\n\r\n    if (loading) {\r\n      return (\r\n          <main className=\"all-memes-main-content\">\r\n              <h1>Loading...</h1>\r\n          </main>\r\n      )}\r\n    if (fulfilled && allMemes) {\r\n      return (\r\n          <main className=\"all-memes-main-content\">\r\n             {allMemes.filter(item => item.box_count <4).map(createMemeComponent)}\r\n          </main>\r\n      )}\r\n    if  (rejected) {\r\n      return (\r\n          <main className=\"all-memes-main-content\">\r\n             <Failed /> \r\n          </main>\r\n      )}\r\n\r\n};\r\nexport default DisplayMemes;\r\n\r\nconst createMemeComponent = (meme) => (\r\n  <Link style={{ textDecoration: 'none' }} to={`/${meme.id}`}>\r\n    <Meme\r\n      key={meme.id}\r\n      id={meme.id}\r\n      name={meme.name}\r\n      alt={meme.name}\r\n      url={meme.url}\r\n    />\r\n  </Link>\r\n);","import { selectMeme, selectIsLoading, selectIsFulfilled } from \"../features/editMeme/memeFormSlice\";\r\nimport {useSelector} from \"react-redux\";\r\nimport Failed from \"./failed\";\r\n\r\nconst FetchedMeme = () => {\r\n        const newMeme = useSelector(selectMeme);\r\n        const loading = useSelector(selectIsLoading)\r\n        const fulfilled = useSelector(selectIsFulfilled)\r\n        if (loading) {\r\n            return (\r\n                <main className=\"fetchedmeme-main\">\r\n                    <lottie-player src=\"https://assets4.lottiefiles.com/packages/lf20_szlepvdh.json\"  background=\"transparent\"  speed=\"1\"  style={{width: \"300px\", height: \"300px;\"}}  loop autoplay></lottie-player>;\r\n                </main>\r\n            )}\r\n            \r\n        if(fulfilled && newMeme) {\r\n            return (\r\n                <main className=\"fetchedmeme-main\">\r\n                    <p>Click on the Meme to download it</p>\r\n                    <a target=\"_blank\" rel=\"noreferrer\" href={newMeme.data.url} download={newMeme.data.url}><img download={newMeme.data.url} alt=\"fetchedmeme\" src={newMeme.data.url}></img></a>\r\n                </main>\r\n            )\r\n        }\r\n\r\n        else {\r\n            return (\r\n                <main className=\"fetchedmeme-main\">\r\n                    <Failed />\r\n                </main>\r\n                \r\n         )}\r\n        \r\n}\r\n\r\nexport default FetchedMeme;\r\n","import React from 'react';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer className='footer-main'>\r\n            <a target=\"_blank\" rel=\"noreferrer\" href=\"https://github.com/ahmettulutas\"> check my github</a>\r\n            <p>AhmetUlutaş</p>\r\n        </footer>\r\n    );\r\n}\r\n\r\nexport default Footer;\r\n","import \"./styles.css\";\r\nimport Header from \"./components/header\";\r\nimport MemeComponent from \"./features/editMeme/memeComponent\";\r\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\r\nimport AllMemes from \"./features/loadMemes/displayMemes\";\r\nimport FetchedMeme from \"./components/fetchedMeme\";\r\nimport Footer from \"./components/footer\";\r\n\r\nexport default function App() {\r\n\r\n  return (\r\n     \r\n          <Router>\r\n          <Header />  \r\n          <div className=\"routes-section\">\r\n          <Routes >\r\n            <Route  path=\"/\" exact element={<AllMemes/>}/>\r\n            <Route path=\"/:id\" element={<MemeComponent />}></Route>\r\n            <Route path=\"/:id/:fetchedmeme\" element={<FetchedMeme />}></Route>\r\n          </Routes>\r\n          </div>  \r\n          <Footer />\r\n          </Router>\r\n\r\n  );\r\n}\r\n","import { Provider } from \"react-redux\";\r\nimport ReactDOM from \"react-dom\";\r\nimport store from \"./store\";\r\nimport {persistor} from \"./store\";\r\nimport App from \"./App\";\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\n\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\n\r\nReactDOM.render(\r\n  \r\n      <Provider store={store}>\r\n          <PersistGate loading={null} persistor={persistor}>     \r\n              <App /> \r\n          </PersistGate>\r\n      </Provider>,\r\n  rootElement\r\n) "],"sourceRoot":""}