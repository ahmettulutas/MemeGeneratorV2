{"version":3,"sources":["features/loadMemes/loadMemesSlice.js","features/editMeme/memeFormSlice.js","store.js","components/header.jsx","components/memeForm.jsx","features/editMeme/memeComponent.js","components/selectbutton.jsx","components/meme.jsx","components/failed.jsx","features/loadMemes/displayMemes.js","components/fetchedMeme.jsx","components/footer.jsx","App.js","index.js"],"names":["loadAllMemes","createAsyncThunk","a","fetch","response","json","data","console","log","loadMemesSlice","createSlice","name","initialState","isLoading","hasError","fulfilled","pending","allMemes","extraReducers","state","action","payload","rejected","PURGE","selectAllMemes","memes","selectIsPending","selectFulfilled","selectRejected","postMemeRequest","arg","fetchedMemeSlice","isFailed","isFulfilled","fetchedmeme","selectMeme","selectIsLoading","selectIsFulfilled","persistConfig","key","storage","whitelist","rootReducer","combineReducers","persistedReducer","persistReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","PAUSE","REGISTER","REHYDRATE","PERSIST","persistor","persistStore","Header","className","to","MemeForm","id","navigate","textAmount","useNavigate","dispatch","useDispatch","useState","template_id","username","process","password","queryParams","setQueryParams","handleChange","e","target","value","prev","toUpperCase","handleSubmit","preventDefault","makeParamsQuery","onSubmit","required","type","placeholder","onChange","obj","Object","entries","map","values","join","MemeComponent","selectedMeme","setSelectedMeme","useSelector","useParams","useEffect","find","item","alt","src","url","box_count","SelectButton","focusable","role","xmlns","viewBox","fill","d","Meme","Failed","background","speed","style","padding","width","height","loop","autoplay","DisplayMemes","loading","filter","createMemeComponent","meme","textDecoration","FetchedMeme","newMeme","href","download","Footer","rel","App","path","element","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.32f17643.chunk.js","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport { PURGE } from \"redux-persist\";\r\n// async action to fetch all meme templates\r\nexport const loadAllMemes = createAsyncThunk(\r\n  \"allMemes/loadAllMemes\",\r\n  async () => {\r\n    try {\r\n      const response = await fetch(\"https://api.imgflip.com/get_memes\");\r\n      const json = await response.json();\r\n      return json.data;\r\n    }\r\n    catch(error) {\r\n      console.log(error)\r\n    };\r\n  }\r\n);\r\n\r\nexport const loadMemesSlice = createSlice({\r\n  name: \"allMemes\",\r\n  initialState: {\r\n    isLoading: true,\r\n    hasError: false,\r\n    fulfilled: false,\r\n    pending:false,\r\n    allMemes: {}\r\n  },\r\n  extraReducers:  {\r\n    [loadAllMemes.pending]: (state, action) => {\r\n      state.pending = true;\r\n    },\r\n    [loadAllMemes.fulfilled]: (state, action) => {\r\n      state.fulfilled = true;\r\n      state.isLoading = false;\r\n      state.allMemes = action.payload;\r\n    },\r\n    [loadAllMemes.rejected]: (state, action) => {\r\n      state.hasError = true;\r\n    },\r\n    [PURGE]: (state) => {\r\n      state = {};\r\n      } \r\n  }\r\n});\r\nexport default loadMemesSlice.reducer;\r\n\r\n// selectors\r\nexport const selectAllMemes = (state) => state.loadMemesSlice.allMemes.memes;\r\nexport const selectIsPending = (state) => state.loadMemesSlice.isLoading;\r\nexport const selectFulfilled = (state) => state.loadMemesSlice.fulfilled;\r\nexport const selectRejected = state  => state.loadMemesSlice.hasError;","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\n\r\n\r\n\r\nexport const postMemeRequest = createAsyncThunk(\"formSlice/postForm\", async (arg) => {\r\n  try {\r\n    const response = await fetch(`https://api.imgflip.com/caption_image${arg}`)\r\n    const json = await response.json()  \r\n    return json;\r\n  }\r\n  catch(error) {\r\n    console.log(error)\r\n  }\r\n\r\n});\r\n\r\nconst fetchedMemeSlice = createSlice({\r\n  name: \"formSlice\",\r\n  initialState: {\r\n    isLoading:false,\r\n    isFailed:false,\r\n    isFulfilled:false,\r\n    fetchedmeme:{}\r\n  },\r\n  extraReducers:{\r\n    [postMemeRequest.pending]:(state,action) => {\r\n      state.isLoading = true;\r\n    },\r\n    [postMemeRequest.fulfilled]:(state,action) => {\r\n      state.fetchedmeme = action.payload;\r\n      state.isFulfilled = true;\r\n      state.isLoading = false;\r\n    },\r\n    [postMemeRequest.rejected]:(state,action) => {\r\n      state.isFailed = true;\r\n    }\r\n  }\r\n\r\n\r\n});\r\nexport default fetchedMemeSlice.reducer;\r\n\r\n//selectors\r\nexport const selectMeme = state => state.fetchedMemeSlice.fetchedmeme;\r\nexport const selectIsLoading = state => state.fetchedMemeSlice.isLoading;\r\nexport const selectIsFulfilled = state => state.fetchedMemeSlice.isFulfilled;\r\n\r\n","\r\n  import { configureStore } from '@reduxjs/toolkit'\r\n  import loadMemesSlice from \"./features/loadMemes/loadMemesSlice\";\r\n  import fetchedMemeSlice from \"./features/editMeme/memeFormSlice\";\r\n  import { combineReducers } from '@reduxjs/toolkit';\r\n  import {\r\n    persistStore,\r\n    persistReducer,\r\n    FLUSH,\r\n    REHYDRATE,\r\n    PAUSE,\r\n    PERSIST,\r\n    PURGE,\r\n    REGISTER,\r\n  } from 'redux-persist'\r\n  import storage from 'redux-persist/lib/storage'\r\nconst persistConfig = { // configuration object for redux-persist\r\n    key: 'root',\r\n    storage, // define which storage to use\r\n    whitelist : ['loadMemesSlice','fetchedMemeSlice'],\r\n  }  \r\nconst rootReducer = combineReducers({\r\n  loadMemesSlice: loadMemesSlice,\r\n  fetchedMemeSlice: fetchedMemeSlice,\r\n})\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer) \r\n\r\nconst store = configureStore({\r\n  reducer: persistedReducer,\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware({\r\n      serializableCheck: {\r\n        ignoredActions: [FLUSH, PAUSE, PURGE, REGISTER, REHYDRATE, PERSIST],\r\n      },\r\n    }), \r\n})\r\n  export const  persistor = persistStore(store);\r\n  export default store;","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nconst Header = () => {\r\n    return (\r\n        <header className=\"header-main\">\r\n            <p>MemeGeneratorV2</p>\r\n            <Link className=\"link\" to=\"/\">ALL MEMES</Link>\r\n            \r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import {useState} from \"react\";\r\nimport { postMemeRequest } from \"../features/editMeme/memeFormSlice\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst MemeForm = ({id,textAmount}) => {\r\n    const navigate = useNavigate()\r\n    const dispatch = useDispatch()\r\n    const [queryParams, setQueryParams] = useState({template_id: id,\r\n                                        username:process.env.REACT_APP_IMGFLIP_USERNAME,\r\n                                        password:process.env.REACT_APP_IMGFLIP_PASSWORD,})\r\n\r\n    const handleChange= (e) => {\r\n        const {name, value} = e.target\r\n        setQueryParams(prev => ({...prev, [name]:value.toUpperCase()}))\r\n        \r\n    }\r\n    const handleSubmit = async (e) => {\r\n        await e.preventDefault();\r\n        await dispatch(postMemeRequest(makeParamsQuery(queryParams)))\r\n        await navigate(`/memes/${id}/${queryParams.template_id +\"fetch\"}`)\r\n        \r\n    }\r\n    return (\r\n            <form className=\"form-main\" onSubmit={handleSubmit}>\r\n                <textarea required name=\"text0\" type=\"text\" placeholder=\"type something...\" onChange={handleChange}>\r\n                </textarea>\r\n                <textarea required name=\"text1\" type=\"text\" placeholder=\"type something...\" onChange={handleChange}>\r\n                </textarea>\r\n                <button type=\"submit\">MakeMeme</button>\r\n            </form>\r\n        )}\r\n\r\nexport default MemeForm;\r\n\r\n//helper function to query params\r\nconst makeParamsQuery = (obj) => {\r\n    const convertedObj =  Object.entries(obj).map(([key,values])=> \r\n        `${key}=${values}`\r\n    )\r\n    return '?' + convertedObj.join('&')\r\n  }    ","import { useParams } from \"react-router-dom\";\r\nimport MemeForm from \"../../components/memeForm.jsx\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectAllMemes } from \"../loadMemes/loadMemesSlice\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst MemeComponent = () => {\r\n  const [selectedMeme, setSelectedMeme] = useState(null);\r\n  const allMemes = useSelector(selectAllMemes);\r\n  const { id } = useParams();\r\n  useEffect(() => {\r\n    //checks if allmemes are loaded \r\n      if (allMemes) {\r\n        setSelectedMeme(allMemes.find(item => item.id === id));\r\n      }\r\n  },[id]);\r\n  return (\r\n    <main className=\"meme-component-main\">\r\n      {selectedMeme && (\r\n        <div className=\"meme-div\">\r\n          <img alt={selectedMeme.name} src={selectedMeme.url}></img>\r\n          <MemeForm id={id} textAmount={selectedMeme.box_count}/>\r\n        </div>\r\n      )}\r\n    </main>\r\n  );\r\n};\r\nexport default MemeComponent;\r\n\r\n\r\n/*window.localStorage.getItem(\"meme\") ? JSON.parse(window.localStorage.getItem(\"meme\")) : null\r\n      window.localStorage.setItem(\"meme\", JSON.stringify(meme))*/\r\n","const SelectButton = () => {\r\n  return (\r\n    <div className=\"svg-div\">\r\n      <svg\r\n        id=\"svg\"\r\n        aria-hidden=\"true\"\r\n        focusable=\"false\"\r\n        data-prefix=\"fas\"\r\n        data-icon=\"pen-to-square\"\r\n        className=\"svg-inline--fa fa-pen-to-square\"\r\n        role=\"img\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        viewBox=\"0 0 512 512\"\r\n      >\r\n        <path\r\n          fill=\"orange\"\r\n          d=\"M383.1 448H63.1V128h156.1l64-64H63.1C28.65 64 0 92.65 0 128v320c0 35.35 28.65 64 63.1 64h319.1c35.34 0 63.1-28.65 63.1-64l-.0039-220.1l-63.1 63.99V448zM497.9 42.19l-28.13-28.14c-18.75-18.75-49.14-18.75-67.88 0l-38.62 38.63l96.01 96.01l38.62-38.63C516.7 91.33 516.7 60.94 497.9 42.19zM147.3 274.4l-19.04 95.22c-1.678 8.396 5.725 15.8 14.12 14.12l95.23-19.04c4.646-.9297 8.912-3.213 12.26-6.562l186.8-186.8l-96.01-96.01L153.8 262.2C150.5 265.5 148.2 269.8 147.3 274.4z\"\r\n        ></path>\r\n      </svg>\r\n    </div>\r\n  );\r\n};\r\nexport default SelectButton;\r\n","import SelectButton from \"./selectbutton.jsx\";\r\n\r\nconst Meme = ({ id, url, alt, name }) => {\r\n  return (\r\n    <main className=\"each-meme\">\r\n      <div className=\"meme-info\">\r\n        <p>{name}</p>\r\n        <img key={id} alt={name} src={url}></img>\r\n      </div>\r\n      <SelectButton />\r\n    </main>\r\n  );\r\n};\r\nexport default Meme;\r\n","import React from 'react';\r\n\r\nconst Failed = () => {\r\n    return <lottie-player src=\"https://assets1.lottiefiles.com/private_files/lf30_itjoc71i.json\"   background=\"transparent\"  speed=\"1\"  style={{padding:\"1rem\", width: \"300px\", height: \"300px\"}}  loop autoplay></lottie-player>\r\n}\r\nexport default Failed;","import {  useEffect } from \"react\";\r\nimport Meme from \"../../components/meme\";\r\nimport Failed from \"../../components/failed\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  selectFulfilled,\r\n  selectAllMemes,\r\n  loadAllMemes,\r\n  selectIsPending,\r\n  selectRejected\r\n} from \"./loadMemesSlice\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst DisplayMemes = () => {\r\n    const dispatch = useDispatch();\r\n    const allMemes = useSelector(selectAllMemes);\r\n    const loading = useSelector(selectIsPending);\r\n    const fulfilled = useSelector(selectFulfilled);\r\n    const rejected = useSelector(selectRejected)\r\n\r\n    useEffect(() => {\r\n      // checks if all meme cards are persisted in the store. I'm getting good at this shit <3.\r\n          if(allMemes === {}) {\r\n              dispatch(loadAllMemes());   \r\n          }  \r\n      }, [dispatch]);\r\n\r\n    if (loading) {\r\n      return (\r\n          <main className=\"all-memes-main-content\">\r\n              <h1>Loading...</h1>\r\n              <lottie-player src=\"https://assets4.lottiefiles.com/packages/lf20_szlepvdh.json\"  background=\"transparent\"  speed=\"1\"  style={{width: \"80%\", height: \"300px;\"}}  loop autoplay></lottie-player>;\r\n          </main>\r\n      )}\r\n    if (fulfilled && allMemes) {\r\n      return (\r\n          <main className=\"all-memes-main-content\">\r\n             {allMemes.filter(item => item.box_count <4).map(createMemeComponent)}\r\n          </main>\r\n      )}\r\n    if  (rejected) {\r\n      return (\r\n          <main className=\"all-memes-main-content\">\r\n             <Failed /> \r\n          </main>\r\n      )}\r\n\r\n};\r\nexport default DisplayMemes;\r\n\r\nconst createMemeComponent = (meme) => (\r\n  <Link style={{ textDecoration: 'none' }} to={`/memes/${meme.id}`}>\r\n    <Meme\r\n      key={meme.id}\r\n      id={meme.id}\r\n      name={meme.name}\r\n      alt={meme.name}\r\n      url={meme.url}\r\n    />\r\n  </Link>\r\n);","import { selectMeme, selectIsLoading, selectIsFulfilled } from \"../features/editMeme/memeFormSlice\";\r\nimport { useSelector } from \"react-redux\";\r\nimport React from 'react';\r\nimport Failed from \"./failed\"\r\nconst FetchedMeme = () => {\r\n        const newMeme = useSelector(selectMeme);\r\n        const loading = useSelector(selectIsLoading)\r\n        const fulfilled = useSelector(selectIsFulfilled)\r\n        if (loading) {\r\n            return (\r\n                <main className=\"fetchedmeme-main\">\r\n                    <lottie-player src=\"https://assets4.lottiefiles.com/packages/lf20_szlepvdh.json\"  background=\"transparent\"  speed=\"1\"  style={{width: \"300px\", height: \"300px;\"}}  loop autoplay></lottie-player>;\r\n                </main>\r\n            )}\r\n            \r\n        if(fulfilled && newMeme) {\r\n            return (\r\n                <main className=\"fetchedmeme-main\">\r\n                    <p>Click on the Meme to download it</p>\r\n                    <a href={newMeme.data.url} download={newMeme.data.url}><img alt=\"fetchedmeme\" src={newMeme.data.url}></img></a>\r\n                </main>\r\n            )\r\n        }\r\n\r\n        else {\r\n            return (\r\n                <main className=\"fetchedmeme-main\">\r\n                    <p>Uppss... Something went wrong...</p>\r\n                    <Failed />\r\n                </main>\r\n                \r\n         )}\r\n        \r\n}\r\n\r\nexport default FetchedMeme;\r\n","import React from 'react';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer className='footer-main'>\r\n            <a target=\"_blank\" rel=\"noreferrer\" href=\"https://github.com/ahmettulutas\"> check my github</a>\r\n            <p>AhmetUlutaş</p>\r\n        </footer>\r\n    );\r\n}\r\n\r\nexport default Footer;\r\n","import \"./styles.css\";\r\nimport Header from \"./components/header\";\r\nimport MemeComponent from \"./features/editMeme/memeComponent\";\r\nimport { BrowserRouter as Router, Navigate, Routes, Route } from \"react-router-dom\";\r\nimport AllMemes from \"./features/loadMemes/displayMemes\";\r\nimport FetchedMeme from \"./components/fetchedMeme\";\r\nimport Footer from \"./components/footer\";\r\nexport default function App() {\r\n  return (\r\n    <main className=\"main-app-layout\">  \r\n        <Router>\r\n          <Header />  \r\n          <div className=\"routes-section\">\r\n          <Routes>\r\n            <Route path=\"/\" element={<AllMemes />}></Route>\r\n            <Route path=\"/memes/:id\" element={<MemeComponent />}></Route>\r\n            <Route path=\"/memes/:id/:fetchedmeme\" element={<FetchedMeme />}></Route>\r\n            <Route path=\"*\" element={<Navigate to=\"/\" />}></Route>\r\n          </Routes>\r\n          </div>  \r\n          <Footer />\r\n        </Router>\r\n    </main>\r\n  );\r\n}\r\n","import { Provider } from \"react-redux\";\r\nimport { StrictMode } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport store from \"./store\";\r\nimport {persistor} from \"./store\";\r\nimport App from \"./App\";\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\n\r\nReactDOM.render(\r\n  <StrictMode>\r\n      <Provider store={store}>\r\n          <PersistGate loading={null} persistor={persistor}> \r\n            <App></App>\r\n          </PersistGate>\r\n      </Provider>\r\n  </StrictMode>,\r\n  rootElement\r\n) "],"sourceRoot":""}