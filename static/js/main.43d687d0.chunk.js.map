{"version":3,"sources":["features/loadMemes/loadMemesSlice.js","features/editMeme/memeFormSlice.js","store.js","components/header.jsx","components/memeForm.jsx","features/editMeme/memeComponent.js","components/selectbutton.js","components/meme.jsx","features/loadMemes/displayMemes.js","components/fetchedMeme.jsx","components/footer.jsx","App.js","index.js"],"names":["loadAllMemes","createAsyncThunk","a","fetch","response","json","data","console","log","loadMemesSlice","createSlice","name","initialState","isLoading","hasError","fulfilled","pending","allMemes","extraReducers","state","action","payload","rejected","selectAllMemes","memes","selectIsLoading","selectFulfilled","postMemeRequest","arg","thunkAPI","filteredMemeSlice","isFailed","isFulfilled","fetchedmeme","memeSelector","store","configureStore","reducer","Header","className","to","MemeForm","id","textAmount","navigate","useNavigate","dispatch","useDispatch","useState","template_id","username","process","password","queryParams","setQueryParams","handleChange","e","target","value","prev","handleSubmit","preventDefault","makeParamsQuery","onSubmit","required","type","placeholder","onChange","obj","Object","entries","map","key","values","join","MemeComponent","selectedMeme","setSelectedMeme","useSelector","useParams","useEffect","find","item","style","width","height","alt","src","url","box_count","SelectButton","focusable","role","xmlns","viewBox","fill","d","Meme","DisplayMemes","loading","createMemeComponent","meme","textDecoration","FetchedMeme","newMeme","success","Footer","App","path","element","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.43d687d0.chunk.js","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\n\r\n// async action to fetch all meme templates\r\nexport const loadAllMemes = createAsyncThunk(\r\n  \"allMemes/loadAllMemes\",\r\n  async () => {\r\n    try {\r\n      const response = await fetch(\"https://api.imgflip.com/get_memes\");\r\n      const json = await response.json();\r\n      return json.data;\r\n    }\r\n    catch(error) {\r\n      console.log(error)\r\n    };\r\n  }\r\n);\r\n\r\nexport const loadMemesSlice = createSlice({\r\n  name: \"allMemes\",\r\n  initialState: {\r\n    isLoading: true,\r\n    hasError: false,\r\n    fulfilled: false,\r\n    pending:false,\r\n    allMemes: {}\r\n  },\r\n  extraReducers: {\r\n    [loadAllMemes.pending]: (state, action) => {\r\n      state.pending = true;\r\n    },\r\n    [loadAllMemes.fulfilled]: (state, action) => {\r\n      state.fulfilled = true;\r\n      state.isLoading = false;\r\n      state.allMemes = action.payload;\r\n    },\r\n    [loadAllMemes.rejected]: (state, action) => {\r\n      state.hasError = true;\r\n    }\r\n  }\r\n});\r\nexport default loadMemesSlice.reducer;\r\n\r\n//selectors\r\nexport const selectAllMemes = (state) => state.loadMemesSlice.allMemes.memes;\r\nexport const selectIsLoading = (state) => state.loadMemesSlice.isLoading;\r\nexport const selectFulfilled = (state) => state.loadMemesSlice.fulfilled;","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\n\r\n\r\n\r\nexport const postMemeRequest = createAsyncThunk(\"formSlice/postForm\", async (arg, thunkAPI) => {\r\n  try {\r\n    console.log(`https://api.imgflip.com/caption_image${arg}`)\r\n    const response = await fetch(`https://api.imgflip.com/caption_image${arg}`)\r\n    const json = await response.json()  \r\n \r\n    return json;\r\n  }\r\n  catch(error) {\r\n    console.log(error)\r\n  }\r\n\r\n});\r\n\r\nconst filteredMemeSlice = createSlice({\r\n  name: \"formSlice\",\r\n  initialState: {\r\n    isLoading:false,\r\n    isFailed:false,\r\n    isFulfilled:false,\r\n    fetchedmeme:{}\r\n  },\r\n  extraReducers:{\r\n    [postMemeRequest.pending]:(state,action) => {\r\n      state.isLoading = true;\r\n    },\r\n    [postMemeRequest.fulfilled]:(state,action) => {\r\n      state.fetchedmeme = action.payload;\r\n      state.isFulfilled = true;\r\n    },\r\n    [postMemeRequest.rejected]:(state,action) => {\r\n      state.isFailed = true;\r\n    }\r\n  }\r\n\r\n\r\n});\r\nexport default filteredMemeSlice.reducer;\r\nexport const memeSelector = state => state.filteredMemeSlice.fetchedmeme;\r\n","  import { configureStore } from '@reduxjs/toolkit'\r\n  import loadMemesSlice from \"./features/loadMemes/loadMemesSlice\";\r\n  import filteredMemeSlice from \"./features/editMeme/memeFormSlice\";\r\n\r\n    const store = configureStore({reducer:{\r\n      loadMemesSlice: loadMemesSlice,\r\n      filteredMemeSlice: filteredMemeSlice,\r\n    }})\r\n  export default store;\r\n","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nconst Header = () => {\r\n    return (\r\n        <header className=\"header-main\">\r\n            <p>Welcome to MemeGeneratorV2</p>\r\n            <Link to=\"/\">ALL MEMES</Link>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import {useState} from \"react\";\r\nimport { postMemeRequest } from \"../features/editMeme/memeFormSlice\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst MemeForm = ({id,textAmount}) => {\r\n    const navigate = useNavigate()\r\n    const dispatch = useDispatch()\r\n    const [queryParams, setQueryParams] = useState({template_id: id,\r\n                                        username:process.env.REACT_APP_IMGFLIP_USERNAME,\r\n                                        password:process.env.REACT_APP_IMGFLIP_PASSWORD,})\r\n\r\n    const handleChange= (e) => {\r\n        const {name, value} = e.target\r\n        setQueryParams(prev => ({...prev, [name]:value}))\r\n        \r\n    }\r\n    const handleSubmit = async (e) => {\r\n        await e.preventDefault();\r\n        await dispatch(postMemeRequest(makeParamsQuery(queryParams)))\r\n        await navigate(`/memes/${id}/${queryParams.template_id +\"fetch\"}`)\r\n        \r\n    }\r\n    if(textAmount > 2) {\r\n        return (\r\n            <form className=\"form-main\" onSubmit={handleSubmit}>\r\n                <input required name=\"text0\" type=\"text\" placeholder=\"text1\" onChange={handleChange}>\r\n                </input>\r\n                <input required name=\"text1\" type=\"text\" placeholder=\"text2\" onChange={handleChange}>\r\n                </input>\r\n                <input required name=\"text2\" type=\"text\" placeholder=\"text3\" onChange={handleChange}>\r\n                </input>\r\n                <input required name=\"text3\" type=\"text\" placeholder=\"text4\" onChange={handleChange}>\r\n                </input>\r\n                <button type=\"submit\">MakeMeme</button>\r\n            </form>\r\n        )}\r\n    else {\r\n        return (\r\n            <form className=\"form-main\" onSubmit={handleSubmit}>\r\n                <input required name=\"text0\" type=\"text\" placeholder=\"text1\" onChange={handleChange}>\r\n                </input>\r\n                <input required name=\"text1\" type=\"text\" placeholder=\"text2\" onChange={handleChange}>\r\n                </input>\r\n                <button type=\"submit\">MakeMeme</button>\r\n            </form>\r\n        )}\r\n    }\r\nexport default MemeForm;\r\n\r\n//helper function to query params\r\nconst makeParamsQuery = (obj) => {\r\n    const convertedObj =  Object.entries(obj).map(([key,values])=> \r\n        `${key}=${values}`\r\n    )\r\n    return '?' + convertedObj.join('&')\r\n  }    ","import { useParams } from \"react-router-dom\";\r\nimport MemeForm from \"../../components/memeForm.jsx\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectAllMemes } from \"../loadMemes/loadMemesSlice\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst MemeComponent = () => {\r\n  const [selectedMeme, setSelectedMeme] = useState(null);\r\n  const allMemes = useSelector(selectAllMemes);\r\n  const { id } = useParams();\r\n  useEffect(() => { \r\n    if (allMemes) { //checks if allmemes are loaded\r\n      setSelectedMeme(allMemes.find(item => item.id === id));\r\n    }\r\n  },[allMemes,id]);\r\n  return (\r\n    <main className=\"meme-component-main\">\r\n      {selectedMeme && (\r\n        <div>\r\n          <img style={{width:\"300px\", height:\"auto\"}}alt={selectedMeme.name} src={selectedMeme.url}></img>\r\n          <MemeForm id={id} textAmount={selectedMeme.box_count}/>\r\n        </div>\r\n      )}\r\n    </main>\r\n  );\r\n};\r\nexport default MemeComponent;\r\n\r\n\r\n/*window.localStorage.getItem(\"meme\") ? JSON.parse(window.localStorage.getItem(\"meme\")) : null\r\n      window.localStorage.setItem(\"meme\", JSON.stringify(meme))*/\r\n","const SelectButton = () => {\r\n  return (\r\n    <div className=\"svg-div\">\r\n      <svg\r\n        id=\"svg\"\r\n        aria-hidden=\"true\"\r\n        focusable=\"false\"\r\n        data-prefix=\"fas\"\r\n        data-icon=\"pen-to-square\"\r\n        className=\"svg-inline--fa fa-pen-to-square\"\r\n        role=\"img\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        viewBox=\"0 0 512 512\"\r\n      >\r\n        <path\r\n          fill=\"white\"\r\n          d=\"M383.1 448H63.1V128h156.1l64-64H63.1C28.65 64 0 92.65 0 128v320c0 35.35 28.65 64 63.1 64h319.1c35.34 0 63.1-28.65 63.1-64l-.0039-220.1l-63.1 63.99V448zM497.9 42.19l-28.13-28.14c-18.75-18.75-49.14-18.75-67.88 0l-38.62 38.63l96.01 96.01l38.62-38.63C516.7 91.33 516.7 60.94 497.9 42.19zM147.3 274.4l-19.04 95.22c-1.678 8.396 5.725 15.8 14.12 14.12l95.23-19.04c4.646-.9297 8.912-3.213 12.26-6.562l186.8-186.8l-96.01-96.01L153.8 262.2C150.5 265.5 148.2 269.8 147.3 274.4z\"\r\n        ></path>\r\n      </svg>\r\n    </div>\r\n  );\r\n};\r\nexport default SelectButton;\r\n","import SelectButton from \"./selectbutton\";\r\n\r\nconst Meme = ({ id, url, alt, name }) => {\r\n  return (\r\n    <main className=\"each-meme\">\r\n      <div className=\"meme-info\">\r\n        <p>{name}</p>\r\n        <img key={id} alt={name} src={url}></img>\r\n      </div>\r\n      <SelectButton />\r\n    </main>\r\n  );\r\n};\r\nexport default Meme;\r\n","import {  useEffect } from \"react\";\r\nimport Meme from \"../../components/meme\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  selectFulfilled,\r\n  selectAllMemes,\r\n  loadAllMemes,\r\n  selectIsLoading\r\n} from \"./loadMemesSlice\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst DisplayMemes = () => {\r\n    const dispatch = useDispatch();\r\n    const allMemes = useSelector(selectAllMemes);\r\n    const loading = useSelector(selectIsLoading);\r\n    const fulfilled = useSelector(selectFulfilled);\r\n\r\n    useEffect(() => {\r\n      dispatch(loadAllMemes());\r\n    },[dispatch, fulfilled]);\r\n\r\n    if (loading) {\r\n      return <h1>Loading...</h1>;\r\n    }\r\n    if(fulfilled) {\r\n      return (\r\n          <main className=\"all-memes-main-content\">\r\n            {allMemes.map(createMemeComponent)}\r\n          </main>\r\n      )}\r\n\r\n};\r\n//asşodjasldasldjaskdjaskldjaskldasjdklsadjaskldjasdkldjakldjakldjaskdlasjdiladjailksdjakildjaislkdjail\r\nexport default DisplayMemes;\r\nconst createMemeComponent = (meme) => (\r\n  <Link style={{ textDecoration: 'none' }} to={`/memes/${meme.id}`}>\r\n    <Meme\r\n      key={meme.id}\r\n      id={meme.id}\r\n      name={meme.name}\r\n      alt={meme.name}\r\n      url={meme.url}\r\n    />\r\n  </Link>\r\n);","import { memeSelector } from \"../features/editMeme/memeFormSlice\";\r\nimport { useSelector } from \"react-redux\";\r\nimport React from 'react';\r\n\r\nconst FetchedMeme = () => {\r\n        const newMeme = useSelector(memeSelector) \r\n        if(newMeme.success) {\r\n            return (\r\n                <main>\r\n                    <img alt=\"fetchedmeme\" src={newMeme.data.url}></img>\r\n                </main>\r\n            )\r\n        }\r\n        else {\r\n            return (\r\n                <main>\r\n                    <h1>Failed to makeMeme</h1>\r\n                </main>\r\n                \r\n                )}\r\n}\r\n\r\nexport default FetchedMeme;\r\n","import React from 'react';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer className='footer-main'>\r\n            this is footer and will include my personal infos\r\n        </footer>\r\n    );\r\n}\r\n\r\nexport default Footer;\r\n","import \"./styles.css\";\nimport Header from \"./components/header\";\nimport MemeComponent from \"./features/editMeme/memeComponent\";\nimport { BrowserRouter as Router, Navigate, Routes, Route, Link } from \"react-router-dom\";\nimport DisplayMemes from \"./features/loadMemes/displayMemes\";\nimport FetchedMeme from \"./components/fetchedMeme\";\nimport Footer from \"./components/footer\";\nexport default function App() {\n  return (\n    <main className=\"main-app-layout\">\n\n    <Router>\n      <Header />\n      <section className=\"routes-section\">\n      <Routes>\n        <Route path=\"/\" element={<DisplayMemes />}></Route>\n        <Route path=\"/memes/:id\" element={<MemeComponent />}></Route>\n        <Route path=\"/memes/:id/:fetchedmeme\" element={<FetchedMeme />}></Route>\n        <Route path=\"*\" element={<Navigate to=\"/\" />}></Route>\n      </Routes>\n      </section>\n      <Footer />\n    </Router>\n    </main>\n  );\n}\n","import { Provider } from \"react-redux\";\nimport { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport store from \"./store\";\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\n\nReactDOM.render(\n  <StrictMode>\n    <Provider store={store}>\n    <App>\n\n    </App>\n    </Provider>\n  </StrictMode>,\n  rootElement\n)"],"sourceRoot":""}